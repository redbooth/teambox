if @activities.any?

  @threads.reverse.each do |thread|
    if thread.thread.is_a?(Conversation) || thread.thread.is_a?(Task)
      page << "if ($('thread_#{thread.thread_id}_comments') != nil) {"
        page.replace_html :"thread_#{thread.thread_id}_comments", render(:partial => 'activities/thread_comments', :locals => { :comments => thread.thread.comments, :thread => thread.thread })
      page << "}"
      page << "else {"
        page.insert_html :top, :activities, show_threaded_activity(thread)
      page << "}"
    else
      page.insert_html :top, :activities, show_threaded_activity(thread)
    end
  end

  page[:activities].visual_effect :highlight, :duration => 3
  
  page << reset_autorefresh
  page << autorefresh(@activities)
  page << "Comment.watch_edit();"
  
  if request.user_agent.to_s =~ /\bFluid\b/
    page << fluid_badge(@activities.length)
    for activity in @activities[0..4]
      next unless activity.target.respond_to? :body
      body = truncate(activity.target.body, :length => 200)
      page << fluid_growl(h(activity.project.name), h(activity.user.name), escape_javascript(body))
    end
  end

  # unless @activities.all? { |a| a.user_id == current_user.id }
  #   page << "Sound.play('/sounds/laser.wav')"
  # end
end

# This code has a problem: If you post a comment in Project#show, there's a chance
# that the autorefresh comments will be requested first, then the comment will post
# and the user will see the comment twice in the timeline.

# Luckily this happens only if they are both quasi-simultaneous.
# This code must be replaced be an HTTP Push solution that avoids duplicates