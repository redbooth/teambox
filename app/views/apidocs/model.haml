%h2= @model.capitalize

= raw render("apidocs/model/#{@model}")

%h2 All the routes

- for route in routes_for_model(@model)
  - doc = @api_docs["#{@model}##{route[:action]}"]
  - next if doc && doc[:ignore]
  .route
    - controller = link_to(route[:controller], api_model_path(route[:controller].singularize))
    %h3= "#{controller}##{route[:action]} #{route[:method]}".html_safe
    .path
      %span.title= "Paths:"
      %ul
        - route[:path].each do |route_path|
          %li
            %code=route_path
    
    - if doc
      .docfield
        %span.title= "Status:"
        - case doc[:status]
        - when :created
          =raw "<tt>201</tt> on success, <tt>422</tt> on error."
        - when :updated
          =raw "<tt>200</tt> on success, <tt>422</tt> on error."
        - when :deleted
          =raw "<tt>200</tt> on success, <tt>422</tt> on error."
        - else
          =raw "<tt>200</tt> on success"
      - if doc[:role]
        - roles = Array(doc[:role])
        %strong= roles.length > 1 ? "Minimum roles:" : "Minimum role:"
        - roles.each do |role|
          %span.role= "#{role.to_s.capitalize}"
      - if doc[:includes]
        .docfield
          %span.title= "Includes:"
          = doc[:includes].map{|i|"<tt>#{i}</tt>"}.join(',').html_safe
      = raw doc[:description]
      - if doc[:parameters]
        %h4= "Parameters you should pass"
        %pre= "\n" + JSON.pretty_generate(doc[:parameters])
      - if doc[:example]
        %h4= "Example response"
        %pre= "\n" + JSON.pretty_generate(doc[:example])

%h3 Error Codes

%p <tt>200</tt> Success
%p <tt>201</tt> Resource created
%p <tt>400</tt> Operation attempted not allowed by XXX.
%p <tt>402</tt> Not authorized to view this resource.
%p <tt>404</tt> Model not found.
%p <tt>422</tt> Invalid model parameters.

= render 'apidocs/column'
