// <%= I18n.locale %>

function format_posted_date_<%= I18n.locale %>()
{
  $$('span.timeago').each(function(c){
    current_date  = new Date();
    posted_date  = new Date();
    posted_date.setTime(c.readAttribute('alt'));
		
		posted_date_beginning_of_day = new Date(posted_date), current_date_beginning_of_day = new Date(current_date);
		
		posted_date_beginning_of_day.setHours(0);
		posted_date_beginning_of_day.setMinutes(0);
		posted_date_beginning_of_day.setSeconds(0);

		current_date_beginning_of_day.setHours(0);
		current_date_beginning_of_day.setMinutes(0);
		current_date_beginning_of_day.setSeconds(0);

		
    minutes = Math.floor((current_date-posted_date) / (1000 * 60));
    days = Math.floor((current_date_beginning_of_day-posted_date_beginning_of_day) / (1000 * 60 * 60 * 24));

		if (minutes < 0) {
			var time_error = true
		};

		if (typeof(time_error) != "undefined") { return }
    else if(minutes < 60)    { c.update(minutesAgoInWords_<%= I18n.locale %>(minutes)); }
    else if(days == 0)  { c.update(posted_date.strftime_<%= I18n.locale %>("<%= I18n.t('time.formats.short') %>")); }
    else if(days == 1)  { c.update('<%= I18n.t 'date.yesterday' %> ' + posted_date.strftime_<%= I18n.locale %>("<%= I18n.t('time.formats.short') %>")); }
    else if(days <= 7)       { c.update(posted_date.strftime_<%= I18n.locale %>("%a <%= I18n.t('date.formats.short')%>")); }
    else if(current_date.getFullYear() == posted_date.getFullYear()) { c.update(posted_date.strftime_<%= I18n.locale %>("<%= I18n.t('date.formats.short')%>")); }
    else c.update(posted_date.strftime_<%= I18n.locale %>("<%= I18n.t('date.formats.long')%>"));    
  }
  );
}

<% 
  less_than_one = I18n.t('datetime.distance_in_words.less_than_x_minutes.one')
  less_than_one_ago = I18n.t('datetime.time_ago', :time_ago_in_words => less_than_one)
  one_minute = I18n.t('datetime.distance_in_words.x_minutes.one')
  one_minute_ago = I18n.t('datetime.time_ago', :time_ago_in_words => one_minute)
  minutes = I18n.t('datetime.distance_in_words.x_minutes', :count => '" + minutes + "')
  minutes_ago = I18n.t('datetime.time_ago', :time_ago_in_words => minutes)
%>

function minutesAgoInWords_<%= I18n.locale %>(minutes) {
  if(minutes == 0) { return "<%= less_than_one_ago %>"; }
  if(minutes == 1) { return "<%= one_minute_ago %>"; }
  return ""+"<%= minutes_ago %>"+"";
  }

